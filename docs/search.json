[
  {
    "objectID": "content/01-introduction.html",
    "href": "content/01-introduction.html",
    "title": "Linear Regression: A Refresher",
    "section": "",
    "text": "library(tidyverse)\nlibrary(poliscidata)\nlibrary(janitor)\nlibrary(scales)\nlibrary(wbstats)\nlibrary(broom)\nlibrary(ggdist)\nYou have a brilliant idea describing the relationship between an outcome of interest and a variable that you think is driving interesting changes to that outcome. You have a very clever theory describing the relationship between these two phenomena. Now you want to provide empirical support of that theory.\nThis quick refresher will outline the steps required to fit a linear regression model against two continuous variables: a dependent variable (or outcome of interest) and an independent variable (or the thing you think is driving changes to that outcome of interest). For a more in-depth set of notes on each of these steps, please refer to the GVPT622: Quantitative Methods for Political Science notes."
  },
  {
    "objectID": "content/01-introduction.html#readings",
    "href": "content/01-introduction.html#readings",
    "title": "Course Introduction",
    "section": "",
    "text": "Quarto introductory tutorial\n Pollock & Edwards R Companion, Chapter 1"
  },
  {
    "objectID": "content/01-introduction.html#class-slides",
    "href": "content/01-introduction.html#class-slides",
    "title": "Course Introduction",
    "section": "Class slides",
    "text": "Class slides"
  },
  {
    "objectID": "content/01-introduction.html#section",
    "href": "content/01-introduction.html#section",
    "title": "Course Introduction",
    "section": "Section",
    "text": "Section\n\nIntroduction to Quarto and markdown\nQuarto provides you with a tool that allows you to create fully reproducible research outputs. It allows you to combine your code, results, and prose into one document that can output in many different format. All of the materials I produced for this class and Maths Camp were created using Quarto.\nYou can use Quarto from RStudio.1 Here is a screen shot of a Quarto document (extension .qmd) and its HTML output. You can render a Quarto document to many different types of formats, including PDF and MS Word.\n\n\n\nSource: Quarto\n\n\n\n\nA new Quarto document\nOpen up a new Quarto document in RStudio:\n\nFill in the relevant fields:\n\nIt will have a .qmd extension. This is the Quarto document extension.\nThe new document will have some introductory text and other things in it. Importantly, it will have a YAML section. This section (written in YAML) includes all of the metadata for your document. It includes the title, author, format in which it will rendered, and the default editor.\n\nThere are two ways to work with and view Quarto documents. The default editor is visual, which follows a more “what-you-see-is-what-you-get” style. Alternatively, you can edit in source, which looks more like a raw script. To switch between the two, you can use the Source and Visual icons in the top left hand side of the screen.\n\n\n\n\n\n\nNote\n\n\n\nI find myself switching between these two formats all the time. The visual editor is much easier to work in when writing, but it can be a bit buggy when it comes to formatting my work and writing code. I work in source when I am doing those two things.\n\n\n\n\nRendering your document\nTo render your document into your chosen format (in this case: HTML), you need to hit the Render icon in the document’s top bar. This will produce a HTML version of your Quarto document in the same folder in which you saved your Quarto document.\nYou can preview your document in RStudio by changing your settings to Preview in Viewer Pane.\n\nNow, whenever you render your document a preview of it will show up in the Viewer pane (which is in the same place as your Files, Plots, and Help panes).\n\n\n\n\n\n\n\nNote\n\n\n\nIf you toggle on the Render on Save option, your Quarto document will render and update your viewer every time you hit save. This can be helpful when you are formatting your document.\n\n\n\n\nWriting prose in Quarto\nYou can write prose as you would in any other text editor in Quarto. When you are in the Visual editor model, Quarto provides you with the shortcut keys for many of the formats you use in other text editors, including MS Word and Google Docs. You can also use your usual keyboard shortcuts.\nIn the Source editor mode, you will need to use markdown. Markdown is a lightweight markup language that allows you to format plain text. It gives you a lot of control over the format of your text documents (similar to Latex).\nHere is the link for a great Markdown tutorial. It takes about 10 minutes to complete, so we will play around in there now.\n\n\nRunning code in Quarto\nYou can also run code from within your Quarto document. You can do this through a code chunk or in-line code. I will step through both options now.\n\nCode chunks\nA code chunk starts with ```{r} and ends with ```. You can then write whole “chunks” of code that will output in your rendered document.\n```{r}\n#| echo: true\n\nlibrary(tidyverse)\n```\nYou can specify your chunk options using #| at the start of the line. For example, above I specified that I wanted the code in the code chunk to be shown when I render my document. You can hide the code by changing the chunk option echo to false. There are many different chunk options that you can control. A full list can be found here.\nYou can set the chunk options in the individual chunks, as show above. Alternatively, you can set them universally in the YAML section at the top of your Quarto document using the execute command. For example:\n```{yaml}\nexecute:\n  echo: true\n  message: false\n  warning: false\n```\nThis will apply to all code chunks unless you overwrite it by including chunk-specific options in a code chunk.\nCode chunks are useful for running large amounts of code. Commonly, I use them to include a plot, a regression table, or to read in my data or model results. For example, you can write the code to create a ggplot directly in your document.\n\n\n\nSource: Quarto\n\n\n\n\nIn-line code\nAlternatively, you often want to reference numbers or results in your prose. For example, I may be writing up the data section of a paper and want to specify that my data set includes 100 observations. If I were to write this in normally and then go away and collect more data, I would need to come back and update this number manually. I may do this several times (very tedious) or I may miss a time (we are all human). In-line coding allows you to include R code in your prose.\nYou include R code directly in your prose using the expression: `r `. For example:\n\nWill render as: There are 234 observations in our data. No need to go and update this reference if that number changes!\n\n\n\n\n\n\nNote\n\n\n\nscales is a great package for formatting numbers.\nFor example, R will output raw numbers such as 1000000000 and 8932348920. scales allows you to format these numbers so they are easier to read: scales::comma(1000000000) gives you 1,000,000,000 and scales::dollar(8932348920) gives you $8,932,348,920."
  },
  {
    "objectID": "content/01-introduction.html#footnotes",
    "href": "content/01-introduction.html#footnotes",
    "title": "Course Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou can also use it from VS Code, Jupyter, Neovim, and Editor.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\n            Advanced Quantitative Methods for Political Science\n        ",
    "section": "",
    "text": "Advanced Quantitative Methods for Political Science\n        \n        \n            An introduction to multivariate analysis.\n        \n        \n            Spring 2024Department of Government and PoliticsUniversity of Maryland, College Park\n        \n    \n    \n      \n        \n        \n        \n      \n    \n\n\n\n\n\n\nProfessor\n\n   Dr Michael Hanmer\n   mhanmer@umd.edu\n\n\n\nTeaching Assistant\n\n   Harriet Goers\n   Chincoteague Building\n   hgoers@umd.edu\n   hgoers\n\n\n\n\n\nCourse details\n\n   January 24 - May 9\n   Thursday, 9:30 - 12:15 PM\n   Tydings Building, Room 1111\n\n\n\nLab details\n\n   TBD\n   TBD\n\n\n\nOffice hours\n\n   TBD\n   Zoom\n\n\n\n\nContacting me\nE-mail is the best ways to get in contact with me. I will try to respond to all course-related e-mails within 24 hours."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "content/01-introduction.html#step-1-know-your-data",
    "href": "content/01-introduction.html#step-1-know-your-data",
    "title": "Course Introduction",
    "section": "Step 1: Know your data",
    "text": "Step 1: Know your data\nOnce you have data for your variables of interest you should take a good look at them. First, take a look at each variable individually. Some useful questions with which to start include:\n\nWhat kind of data are they (continuous or categorical)?\nHow are they distributed (normally or are they skewed)?\nAre there any unusual data points? If so, why are they unusual?\nAre any observations missing? Is this missingness random or systematic?\n\nOne of the easiest ways to answer these and other important questions is by visualizing your variables. We can use the many great plot functions in ggplot to do this:\n\nCategorical variables\n\n\n\n\n\n\n\nContinuous variables"
  },
  {
    "objectID": "content/01-introduction.html#step-1-collect-your-data",
    "href": "content/01-introduction.html#step-1-collect-your-data",
    "title": "Linear Regression: A Refresher",
    "section": "Step 1: Collect your data",
    "text": "Step 1: Collect your data\nTo answer this question, we need data on the health and wealth of each country’s citizens. I propose to follow the approach applied by the Gapminder project. We will use the average life expectancy of each country’s citizens as a proxy measure of the health of its citizens. Countries with higher average life expectancy are assumed to have higher levels of health.\nWe will use each country’s gross domestic product (GDP) per capita as our proxy measure of its citizens’ average wealth. Countries with higher GDP per capita are assumed to have wealthier citizens.\nOur measurable hypothesis is as follows:\n\nThe higher a country’s GDP per capita, the longer its average life expectancy will be.\n\nWe have access through the World Bank to reliable statistics on both of these variables. We can use the wbstats R package to pull these data from the World Bank API from within our R script.\n\ngapminder_df &lt;- wb_data(\n  indicator = c(\"SP.DYN.LE00.IN\", \"NY.GDP.PCAP.CD\"),\n  start_date = 2021,\n  end_date = 2021\n) |&gt; \n  rename(\n    life_exp = SP.DYN.LE00.IN,\n    gdp_per_cap = NY.GDP.PCAP.CD\n  ) |&gt; \n  mutate(log_gdp_per_cap = log(gdp_per_cap)) \n\ngapminder_df\n\n# A tibble: 217 × 7\n   iso2c iso3c country               date gdp_per_cap life_exp log_gdp_per_cap\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;                &lt;dbl&gt;       &lt;dbl&gt;    &lt;dbl&gt;           &lt;dbl&gt;\n 1 AW    ABW   Aruba                 2021      29128.     74.6           10.3 \n 2 AF    AFG   Afghanistan           2021        356.     62.0            5.87\n 3 AO    AGO   Angola                2021       1927.     61.6            7.56\n 4 AL    ALB   Albania               2021       6377.     76.5            8.76\n 5 AD    AND   Andorra               2021      42072.     NA             10.6 \n 6 AE    ARE   United Arab Emirates  2021      44332.     78.7           10.7 \n 7 AR    ARG   Argentina             2021      10651.     75.4            9.27\n 8 AM    ARM   Armenia               2021       4973.     72.0            8.51\n 9 AS    ASM   American Samoa        2021      16654.     NA              9.72\n10 AG    ATG   Antigua and Barbuda   2021      17179.     78.5            9.75\n# ℹ 207 more rows\n\n\n\nYou need to make sure that your data are collected in a consistent manner. Be careful if you are pulling data from multiple sources: different data collection and processing methods may create artificial difference in your observations that can lead you to uncovering a false relationship."
  },
  {
    "objectID": "content/01-introduction.html#step-2-know-your-data",
    "href": "content/01-introduction.html#step-2-know-your-data",
    "title": "Linear Regression: A Refresher",
    "section": "Step 2: Know your data",
    "text": "Step 2: Know your data\nOnce you have data for your variables of interest you should take a good look at them.\n\nIndividual variables\nFirst, take a look at each variable individually. Some useful questions with which to start include:\n\nWhat kind of data are they (continuous or categorical)?\nHow are they distributed (normally or are they skewed)?\nAre there any unusual data points? If so, why are they unusual?\nAre any observations missing? Is this missingness random or systematic?\n\nOne of the easiest ways to answer these and other important questions is by visualizing your variables. We can use the many great plot functions in ggplot to do this.\n\nggplot(gapminder_df, aes(x = gdp_per_cap)) + \n  geom_histogram() + \n  theme_minimal() + \n  labs(\n    x = \"GDP per capita (in current USD)\",\n    y = \"Count\"\n  ) + \n  scale_x_continuous(labels = label_dollar())\n\n\n\n\n\nggplot(gapminder_df, aes(x = life_exp)) + \n  geom_histogram() + \n  theme_minimal() + \n  labs(\n    x = \"Average life expectancy (in years)\",\n    y = \"Count\"\n  )\n\n\n\n\n\n\nYour two variables\nNow you should take a look at the relationship between your two variables of interest.\nSome good questions with which to start:\n\nHow do the two variables move with each other? As one goes up, does the other also go up, go down, or stay roughly constant?\nWhat is the shape of this relationship? Is it constant (linear)?\nAre there any noticable clusters or groups of observations?\nAre there any unusual observations? Ones sitting out on their own?\n\nLet’s visualize the relationship between health and wealth:\n\nggplot(gapminder_df, aes(x = gdp_per_cap, y = life_exp)) + \n  geom_point() + \n  theme_minimal() + \n  labs(x = \"GDP per capita (USD current)\",\n       y = \"Average life expectancy (years)\") + \n  scale_x_continuous(labels = label_dollar())\n\n\n\n\nThis relationship is positive: as a country’s wealth increases, so too does its health. However, this relationship is not linear. An increase of $1,000 GDP per capita tends to be associated with a large increase in the country’s average life expectancy when the country has relatively low GDP per capita compared to the change in a country’s average life expectancy that tends to be associated with that same $1,000 increase in GDP per capita for relatively wealthier countries.\nWe can model non-linear relationships; however, these models can be difficult to interpret. Happily the relationship between a country’s average life expectancy and its logged GDP per capita is linear:\n\nggplot(gapminder_df, aes(x = log_gdp_per_cap, y = life_exp)) + \n  geom_point() + \n  theme_minimal() + \n  labs(x = \"Logged GDP per capita\",\n       y = \"Average life expectancy (years)\") + \n  scale_x_continuous(labels = label_dollar())\n\n\n\n\nThis transformation means that we can now appropriately fit a linear model to these two variables: logged GDP per capita and average life expectancy."
  },
  {
    "objectID": "content/01-introduction.html#step-3-fit-your-linear-model",
    "href": "content/01-introduction.html#step-3-fit-your-linear-model",
    "title": "Linear Regression: A Refresher",
    "section": "Step 3: Fit your linear model",
    "text": "Step 3: Fit your linear model\nWe can now fit a linear regression model to our data to better capture and generalize this relationship.\n\nAn Ordinary Least Squares (OLS) regression finds the straight line that minimizes the distance between itself and all of the data points.\n\nWe can visualize that relationship using geom_smooth() from ggplot:\n\nggplot(gapminder_df, aes(x = log_gdp_per_cap, y = life_exp)) + \n  geom_point() + \n  geom_smooth(method = \"lm\", se = F) + \n  theme_minimal() + \n  labs(x = \"Logged GDP per capita\",\n       y = \"Average life expectancy (years)\") + \n  scale_x_continuous(labels = label_dollar())\n\n\n\n\nWe can fit that model using lm():\n\nm &lt;- lm(life_exp ~ log_gdp_per_cap, data = gapminder_df)\n\nm\n\n\nCall:\nlm(formula = life_exp ~ log_gdp_per_cap, data = gapminder_df)\n\nCoefficients:\n    (Intercept)  log_gdp_per_cap  \n         33.427            4.316  \n\n\nThis gives us an estimated linear relationship between a country’s health and wealth. Formally:\n\\[\nLife\\ expectancy = \\beta_0 + \\beta_{1} Logged\\ GDP\\ per\\ capita + \\epsilon\n\\]\nOur model estimates the following relationship:\n\\[\nLife\\ expectancy = 33.427 + 4.316 Logged\\ GDP\\ per\\ capita + \\epsilon\n\\]\nWe can use this model to do all kinds of amazing things, including (hopefully) providing empirical support for our theories and making predictions about some outcome of interest."
  },
  {
    "objectID": "content/01-introduction.html#do-richer-countries-enjoy-better-health-outcomes",
    "href": "content/01-introduction.html#do-richer-countries-enjoy-better-health-outcomes",
    "title": "Linear Regression: A Refresher",
    "section": "Do richer countries enjoy better health outcomes?",
    "text": "Do richer countries enjoy better health outcomes?\nLet’s return to a familiar question: what is the relationship between a country’s health and its wealth? This research question will help guide our refresher."
  },
  {
    "objectID": "content/01-introduction.html#step-4-interpret-your-model",
    "href": "content/01-introduction.html#step-4-interpret-your-model",
    "title": "Linear Regression: A Refresher",
    "section": "Step 4: Interpret your model",
    "text": "Step 4: Interpret your model\nWhat does this model tell us about the estimated relationship between a country’s life expectancy and its logged GDP per capita?\nFirst, let’s look at the regression coefficient for a country’s logged GDP per capita. We found that every one unit increase in a country’s logged GDP per capita is associated with a 4.316 years increase in its citizens’ average life expectancy, on average.\nSecond, let’s look at that intercept coefficient. A country with a logged GDP per capita of zero is expected to have an average life expectancy of 33.427 years, on average. This is not a very useful piece of information because there are no countries with zero (logged) GDP per capita. Therefore, this intercept coefficient is more usefully though of as a statistical artifact that baselines our model.\n\n\n\n\n\n\nWarning\n\n\n\nLinear regression models cannot detect causal relationships. You cannot use this model to determine whether changes to your dependent variable are caused by changes to your independent variable. Therefore, you need to be careful when interpreting linear regression models. Use words like “associated with” instead of “causes”."
  },
  {
    "objectID": "content/01-introduction.html#step-5-evaluate-your-model",
    "href": "content/01-introduction.html#step-5-evaluate-your-model",
    "title": "Linear Regression: A Refresher",
    "section": "Step 5: Evaluate your model",
    "text": "Step 5: Evaluate your model\nHow well does our model fit our data? This is a complicated question without a single answer. As we step through this you should think critically about what questions you should ask of your data and your model that would help convince you that you have found the underlying relationship.\nUltimately, we want to find a generalized relationship between two variables of interest. We can then use this generalized relationship to develop our understanding of our outcome of interest and the variables that affect it.\nOLS regression is one approach to finding this generalized relationship. Remember, an OLS regression finds the straight line that minimizes the distance between itself and all of the data points. To illustrate, let’s look back at our fitted model within the context of the data points used to generate it:\n\nggplot(gapminder_df, aes(x = log_gdp_per_cap, y = life_exp)) + \n  geom_point() + \n  geom_smooth(method = \"lm\", se = F) + \n  theme_minimal() + \n  labs(x = \"Logged GDP per capita\",\n       y = \"Average life expectancy (years)\") + \n  scale_x_continuous(labels = label_dollar())\n\n\n\n\nThis is a strong and clean relationship: I can clearly see that countries with higher logged GDP per capita tend to have longer average life expectancies. This is incorporated into our model, which formalizes this positive relationship.\nThere are many different ways we can think about error and evaluate our model, but before you apply any more complicated statistical tests you should take a look at your model in the context of your data. This really is the best way to determine whether your model is capturing the underlying relationship between your variables.\n\nError for each data point\nAn OLS regression finds the straight line that minimizes the distance between itself and all of the data points. We can look at how far the predicted value produced by our model is from each data point (whihc here represents a country’s actual average life expectancy and logged GDP per capita in 2023). This distance is called the residual. We can use broom::augment() to find it:\n\naugment(m) |&gt; \n  select(life_exp, .fitted, .resid)\n\n# A tibble: 202 × 3\n   life_exp .fitted .resid\n      &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n 1     74.6    77.8 -3.17 \n 2     62.0    58.8  3.20 \n 3     61.6    66.1 -4.43 \n 4     76.5    71.2  5.22 \n 5     78.7    79.6 -0.898\n 6     75.4    73.5  1.94 \n 7     72.0    70.2  1.88 \n 8     78.5    75.5  2.98 \n 9     83.3    81.0  2.34 \n10     81.2    80.4  0.818\n# ℹ 192 more rows\n\n\nFor each 217 country, we have the observed average life expectancy (life_exp), the model’s predicted average life expectancy (.fitted, which is determined using the country’s observed logged GDP per capita), and the difference between these two values (.resid).\nWe can take a broader look at those differences:\n\nggplot(augment(m), aes(x = .resid)) + \n  geom_density() + \n  geom_vline(xintercept = 0) + \n  theme_minimal()\n\n\n\n\nIf our model perfectly predicted each country’s life expectancy, we would see no difference between the predicted and observed values. There would just be a very tall straight line at zero on the graph above.\n\n\n\n\n\n\nNote\n\n\n\nThis is not necessarily the goal. Random error is fine: the world is a complicated and chaotic place. However, we can use these residuals to evaluate our model. For example, you may notice that residuals for certain countries or groupings of countries are larger than the rest. This may prompt you to re-examine your data collection process (perhaps something strange went on) or to include another variable in your model that captures these differences.\n\n\nOur model hasn’t predicted life expectancy perfectly. Although most predictions are within a couple of years of the country’s observed average life expectancy, there are some that are very different (up to 10 or 15 years!). Where the model has got it wrong, it has tended to overestimate life expectancy (note that the peak of the density curve sits above zero).\n\n\nModel-wide tools\nSometimes we need a measure of the model’s overall accuracy. Here, I will refer you back to our notes from GVPT622.\n\n\n\n\n\n\nTip\n\n\n\nYou should be familiar with these tests: your colleagues will refer to them and reviewers may look at them. However, there is increasing recognition among political scientists of their limits. You will be far better off asking specific and critical questions of your data and your models than you will be by relying on many of these tests, which can sometimes be misleading.\nFor example, most of these tests are sensitive to the quantity of data you use. If you throw an extraordinary amount of data into your models, you will likely get a very good looking F-statistic and T-statistic, even if you have not fully uncovered the underlying relationship in your data. Our access to and ability to use very large amounts of data is only increasing. Issues with some of these tests will become more acute."
  },
  {
    "objectID": "content/01-introduction.html#step-6-evaluate-your-coefficients",
    "href": "content/01-introduction.html#step-6-evaluate-your-coefficients",
    "title": "Linear Regression: A Refresher",
    "section": "Step 6: Evaluate your coefficients",
    "text": "Step 6: Evaluate your coefficients\nAt this stage, we have a model that fits our data well. We now want to ask whether the relationship we have uncovered is statistically significantly different from no relationship. In other words, is this all just random noise?\nAssume that we have a pure random sample of our population. If we were to pull a different pure random sample from our population we would get a different set of coefficients. That’s totally fine! However, we need to work out what these different coefficients could plausibly be. Once we have done that, we can determine whether or not they include zero (or no relationship).\n\n\n\n\n\n\nNote\n\n\n\nFor the long version of this, return to the Regression notes from GVPT622.\n\n\nWe use the coefficients we produced using our data as our best guesses:\n\ntidy(m) |&gt; \n  select(term:estimate)\n\n# A tibble: 2 × 2\n  term            estimate\n  &lt;chr&gt;              &lt;dbl&gt;\n1 (Intercept)        33.4 \n2 log_gdp_per_cap     4.32\n\n\nWe can then use the standard deviations around these best guesses to work out how spread out around this best guess alternative plausible coefficients sit.\n\n\n\n\n\n\nTip\n\n\n\nThe standard deviation, (\\(s\\)), is calculated using two pieces of information: how well our line of best fit fits our observed data; and how much information (or data) we used to fit our model.\n\n\nYou can find each coefficient’s standard deviation using broom::tidy():\n\ntidy(m) |&gt; \n  select(term:std.error)\n\n# A tibble: 2 × 3\n  term            estimate std.error\n  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)        33.4      1.82 \n2 log_gdp_per_cap     4.32     0.203\n\n\nWe can now build out the plausible set of alternative coefficients:\n\ntibble(\n  x = rnorm(1e6, \n            mean = tidy(m) |&gt; filter(term == \"log_gdp_per_cap\") |&gt; pull(estimate),\n            sd = tidy(m) |&gt; filter(term == \"log_gdp_per_cap\") |&gt; pull(std.error))\n) |&gt; \n  ggplot(aes(x = x)) + \n  stat_halfeye() + \n  theme_minimal()\n\n\n\n\nIf we were to build an infinite number of linear regression models from an infinite number of pure random samples from the world (think: multiverse) we would get a series of coefficients that follow the distribution plotted above. Does this include zero (or no relationship)?\n\n\n\n\n\n\nNote\n\n\n\nRemember, regression coefficients tell us the expected change in our dependent variable changes for each one-unit increase in our independent variable, on average. If there is no association between our variables, there will be no change in our dependent variable and our regression coefficient will be zero.\n\n\nMost of the time you will be required to demonstrate that at least 95 percent of these plausible alternative coefficients do not include zero to claim statistical significance. To do this, we need to calculate the probability that we would observe the coefficient we found (here: 4.316) if it were actually equal to zero. This probability is referred to as the p-value. We calculate it by finding our coefficient’s T-statistic.\n\n\n\n\n\n\nTip\n\n\n\nThe T-distribution is standard and centered at zero. We can transform our coefficient to its T-statistic and place it within this broader T-distribution to determine how likely we are to observe this or a more extreme value.\n\n\nbroom::tidy() provides both the T-statistic and p-value for our coefficients:\n\ntidy(m)\n\n# A tibble: 2 × 5\n  term            estimate std.error statistic  p.value\n  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)        33.4      1.82       18.3 1.17e-44\n2 log_gdp_per_cap     4.32     0.203      21.3 2.77e-53"
  }
]