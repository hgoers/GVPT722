---
title: "Linear Regression: A Refresher"
execute:
  message: false
  warning: false
---

```{r}
library(tidyverse)
library(poliscidata)
library(janitor)
library(scales)
library(wbstats)
library(broom)
library(ggdist)
```

You have a brilliant idea describing the relationship between an outcome of interest and a variable that you think is driving interesting changes to that outcome. You have a very clever theory describing the relationship between these two phenomena. Now you want to provide empirical support of that theory.

This quick refresher will outline the steps required to fit a linear regression model against two continuous variables: a dependent variable (or outcome of interest) and an independent variable (or the thing you think is driving changes to that outcome of interest). For a more in-depth set of notes on each of these steps, please refer to the [GVPT622: Quantitative Methods for Political Science notes](hgoers.github.io/gvpt622).

## Do richer countries enjoy better health outcomes?

Let's return to a familiar question: what is the relationship between a country's health and its wealth? This research question will help guide our refresher.

## Step 1: Collect your data

To answer this question, we need data on the health and wealth of each country's citizens. I propose to follow the approach applied by the Gapminder project. We will use the average life expectancy of each country's citizens as a proxy measure of the health of its citizens. Countries with higher average life expectancy are assumed to have higher levels of health.

We will use each country's gross domestic product (GDP) per capita as our proxy measure of its citizens' average wealth. Countries with higher GDP per capita are assumed to have wealthier citizens.

Our measurable hypothesis is as follows:

> The higher a country's GDP per capita, the longer its average life expectancy will be.

We have access through the World Bank to reliable statistics on both of these variables. We can use the `wbstats` R package to pull these data from the World Bank API from within our R script.

```{r}
gapminder_df <- wb_data(
  indicator = c("SP.DYN.LE00.IN", "NY.GDP.PCAP.CD"),
  start_date = 2021,
  end_date = 2021
) |> 
  rename(
    life_exp = SP.DYN.LE00.IN,
    gdp_per_cap = NY.GDP.PCAP.CD
  ) |> 
  mutate(log_gdp_per_cap = log(gdp_per_cap)) 

gapminder_df
```

::: aside-tip
You need to make sure that your data are collected in a consistent manner. Be careful if you are pulling data from multiple sources: different data collection and processing methods may create artificial difference in your observations that can lead you to uncovering a false relationship.
:::

## Step 2: Know your data

Once you have data for your variables of interest you should take a good look at them.

### Individual variables

First, take a look at each variable individually. Some useful questions with which to start include:

-   What kind of data are they (continuous or categorical)?

-   How are they distributed (normally or are they skewed)?

-   Are there any unusual data points? If so, why are they unusual?

-   Are any observations missing? Is this missingness random or systematic?

One of the easiest ways to answer these and other important questions is by visualizing your variables. We can use the many great plot functions in `ggplot` to do this.

```{r}
ggplot(gapminder_df, aes(x = gdp_per_cap)) + 
  geom_histogram() + 
  theme_minimal() + 
  labs(
    x = "GDP per capita (in current USD)",
    y = "Count"
  ) + 
  scale_x_continuous(labels = label_dollar())
```

```{r}
ggplot(gapminder_df, aes(x = life_exp)) + 
  geom_histogram() + 
  theme_minimal() + 
  labs(
    x = "Average life expectancy (in years)",
    y = "Count"
  )
```

### Your two variables

Now you should take a look at the relationship between your two variables of interest.

Some good questions with which to start:

-   How do the two variables move with each other? As one goes up, does the other also go up, go down, or stay roughly constant?

-   What is the shape of this relationship? Is it constant (linear)?

-   Are there any noticable clusters or groups of observations?

-   Are there any unusual observations? Ones sitting out on their own?

Let's visualize the relationship between health and wealth:

```{r}
ggplot(gapminder_df, aes(x = gdp_per_cap, y = life_exp)) + 
  geom_point() + 
  theme_minimal() + 
  labs(x = "GDP per capita (USD current)",
       y = "Average life expectancy (years)") + 
  scale_x_continuous(labels = label_dollar())
```

This relationship is positive: as a country's wealth increases, so too does its health. However, this relationship is not linear. An increase of \$1,000 GDP per capita tends to be associated with a large increase in the country's average life expectancy when the country has relatively low GDP per capita compared to the change in a country's average life expectancy that tends to be associated with that same \$1,000 increase in GDP per capita for relatively wealthier countries.

We can model non-linear relationships; however, these models can be difficult to interpret. Happily the relationship between a country's average life expectancy and its *logged* GDP per capita is linear:

```{r}
ggplot(gapminder_df, aes(x = log_gdp_per_cap, y = life_exp)) + 
  geom_point() + 
  theme_minimal() + 
  labs(x = "Logged GDP per capita",
       y = "Average life expectancy (years)") + 
  scale_x_continuous(labels = label_dollar())
```

This transformation means that we can now appropriately fit a linear model to these two variables: *logged* GDP per capita and average life expectancy.

## Step 3: Fit your linear model

We can now fit a linear regression model to our data to better capture and generalize this relationship.

> An Ordinary Least Squares (OLS) regression finds the straight line that minimizes the distance between itself and all of the data points.

We can visualize that relationship using `geom_smooth()` from `ggplot`:

```{r}
ggplot(gapminder_df, aes(x = log_gdp_per_cap, y = life_exp)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = F) + 
  theme_minimal() + 
  labs(x = "Logged GDP per capita",
       y = "Average life expectancy (years)") + 
  scale_x_continuous(labels = label_dollar())
```

We can fit that model using `lm()`:

```{r}
m <- lm(life_exp ~ log_gdp_per_cap, data = gapminder_df)

m
```

This gives us an estimated linear relationship between a country's health and wealth. Formally:

$$
Life\ expectancy = \beta_0 + \beta_{1} Logged\ GDP\ per\ capita + \epsilon
$$

Our model estimates the following relationship:

$$
Life\ expectancy = 33.427 + 4.316 Logged\ GDP\ per\ capita + \epsilon
$$

We can use this model to do all kinds of amazing things, including (hopefully) providing empirical support for our theories and making predictions about some outcome of interest.

## Step 4: Interpret your model

What does this model tell us about the estimated relationship between a country's life expectancy and its logged GDP per capita?

First, let's look at the regression coefficient for a country's logged GDP per capita. We found that every one unit increase in a country's logged GDP per capita is associated with a `r tidy(m) |> filter(term == "log_gdp_per_cap") |> pull(estimate) |> round(3)` years increase in its citizens' average life expectancy, on average.

Second, let's look at that intercept coefficient. A country with a logged GDP per capita of zero is expected to have an average life expectancy of `r tidy(m) |> filter(term == "(Intercept)") |> pull(estimate) |> round(3)` years, on average. This is not a very useful piece of information because there are no countries with zero (logged) GDP per capita. Therefore, this intercept coefficient is more usefully though of as a statistical artifact that baselines our model.

::: {.callout-warning}
Linear regression models cannot detect causal relationships. You cannot use this model to determine whether changes to your dependent variable are caused by changes to your independent variable. Therefore, you need to be careful when interpreting linear regression models. Use words like "associated with" instead of "causes".
:::

## Step 5: Evaluate your model

How well does our model fit our data? This is a complicated question without a single answer. As we step through this you should think critically about what questions you should ask of your data and your model that would help convince you that you have found the underlying relationship.

Ultimately, we want to find a generalized relationship between two variables of interest. We can then use this generalized relationship to develop our understanding of our outcome of interest and the variables that affect it.

OLS regression is one approach to finding this generalized relationship. Remember, an OLS regression finds the straight line that minimizes the distance between itself and all of the data points. To illustrate, let's look back at our fitted model within the context of the data points used to generate it:

```{r}
ggplot(gapminder_df, aes(x = log_gdp_per_cap, y = life_exp)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = F) + 
  theme_minimal() + 
  labs(x = "Logged GDP per capita",
       y = "Average life expectancy (years)") + 
  scale_x_continuous(labels = label_dollar())
```

This is a strong and clean relationship: I can clearly see that countries with higher logged GDP per capita tend to have longer average life expectancies. This is incorporated into our model, which formalizes this positive relationship.

There are many different ways we can think about error and evaluate our model, but before you apply any more complicated statistical tests you should take a look at your model in the context of your data. This really is the best way to determine whether your model is capturing the underlying relationship between your variables.

### Error for each data point

An OLS regression finds the straight line that minimizes the distance between itself and all of the data points. We can look at how far the predicted value produced by our model is from each data point (whihc here represents a country's actual average life expectancy and logged GDP per capita in 2023). This distance is called the **residual**. We can use `broom::augment()` to find it:

```{r}
augment(m) |> 
  select(life_exp, .fitted, .resid)
```

For each `r nrow(gapminder_df)` country, we have the observed average life expectancy (`life_exp`), the model's predicted average life expectancy (`.fitted`, which is determined using the country's observed logged GDP per capita), and the difference between these two values (`.resid`).

We can take a broader look at those differences:

```{r}
ggplot(augment(m), aes(x = .resid)) + 
  geom_density() + 
  geom_vline(xintercept = 0) + 
  theme_minimal()
```

If our model perfectly predicted each country’s life expectancy, we would see no difference between the predicted and observed values. There would just be a very tall straight line at zero on the graph above.

::: callout-note
This is not necessarily the goal. Random error is fine: the world is a complicated and chaotic place. However, we can use these residuals to evaluate our model. For example, you may notice that residuals for certain countries or groupings of countries are larger than the rest. This may prompt you to re-examine your data collection process (perhaps something strange went on) or to include another variable in your model that captures these differences.
:::

Our model hasn’t predicted life expectancy perfectly. Although most predictions are within a couple of years of the country’s observed average life expectancy, there are some that are very different (up to 10 or 15 years!). Where the model has got it wrong, it has tended to overestimate life expectancy (note that the peak of the density curve sits above zero).

### Model-wide tools

Sometimes we need a measure of the model's overall accuracy. Here, I will refer you back to our notes from GVPT622.

::: callout-tip
You should be familiar with these tests: your colleagues will refer to them and reviewers may look at them. However, there is increasing recognition among political scientists of their limits. You will be far better off asking specific and critical questions of your data and your models than you will be by relying on many of these tests, which can sometimes be misleading.

For example, most of these tests are sensitive to the quantity of data you use. If you throw an extraordinary amount of data into your models, you will likely get a very good looking F-statistic and T-statistic, even if you have not fully uncovered the underlying relationship in your data. Our access to and ability to use very large amounts of data is only increasing. Issues with some of these tests will become more acute.
:::

## Step 6: Evaluate your coefficients

At this stage, we have a model that fits our data well. We now want to ask whether the relationship we have uncovered is statistically significantly different from no relationship. In other words, is this all just random noise?

Assume that we have a pure random sample of our population. If we were to pull a different pure random sample from our population we would get a different set of coefficients. That's totally fine! However, we need to work out what these different coefficients could plausibly be. Once we have done that, we can determine whether or not they include zero (or no relationship).

::: {.callout-note}
For the long version of this, return to the [Regression notes from GVPT622](hgoers.github.io/content/11-regression.html).
:::

We use the coefficients we produced using our data as our best guesses:

```{r}
tidy(m) |> 
  select(term:estimate)
```

We can then use the standard deviations around these best guesses to work out how spread out around this best guess alternative plausible coefficients sit. 

::: {.callout-tip}
The standard deviation, ($s$), is calculated using two pieces of information: how well our line of best fit fits our observed data; and how much information (or data) we used to fit our model.  
:::

You can find each coefficient's standard deviation using `broom::tidy()`:

```{r}
tidy(m) |> 
  select(term:std.error)
```

We can now build out the plausible set of alternative coefficients: 

```{r}
tibble(
  x = rnorm(1e6, 
            mean = tidy(m) |> filter(term == "log_gdp_per_cap") |> pull(estimate),
            sd = tidy(m) |> filter(term == "log_gdp_per_cap") |> pull(std.error))
) |> 
  ggplot(aes(x = x)) + 
  stat_halfeye() + 
  theme_minimal()
```

If we were to build an infinite number of linear regression models from an infinite number of pure random samples from the world (think: multiverse) we would get a series of coefficients that follow the distribution plotted above. Does this include zero (or no relationship)? 

::: callout-note
Remember, regression coefficients tell us the expected change in our dependent variable changes for each one-unit increase in our independent variable, on average. If there is no association between our variables, there will be no change in our dependent variable and our regression coefficient will be zero.
:::

Most of the time you will be required to demonstrate that at least 95 percent of these plausible alternative coefficients do not include zero to claim statistical significance. To do this, we need to calculate the probability that we would observe the coefficient we found (here: `r tidy(m) |> filter(term == "log_gdp_per_cap") |> pull(estimate) |> round(3)`) if it were actually equal to zero. This probability is referred to as the **p-value**. We calculate it by finding our coefficient's T-statistic.

::: {.callout-tip}
The T-distribution is standard and centered at zero. We can transform our coefficient to its T-statistic and place it within this broader T-distribution to determine how likely we are to observe this or a more extreme value.    
:::

`broom::tidy()` provides both the T-statistic and p-value for our coefficients:

```{r}
tidy(m)
```
